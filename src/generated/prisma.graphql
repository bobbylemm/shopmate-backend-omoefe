# source: https://omo-shopmate-dd0abedf95.herokuapp.com/serve3/prod
# timestamp: Sun Jun 30 2019 11:35:02 GMT+0100 (West Africa Standard Time)

type AggregateAttribute {
  count: Int!
}

type AggregateAttributeValue {
  count: Int!
}

type AggregateAudit {
  count: Int!
}

type AggregateCart {
  count: Int!
}

type AggregateCartItem {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateShipping {
  count: Int!
}

type AggregateShippingRegion {
  count: Int!
}

type AggregateTax {
  count: Int!
}

type Attribute implements Node {
  id: ID!
  values(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttributeValue!]
  name: String!
}

"""A connection to a list of items."""
type AttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeEdge]!
  aggregate: AggregateAttribute!
}

input AttributeCreateInput {
  id: ID
  name: String!
  values: AttributeValueCreateManyWithoutAttributeInput
}

input AttributeCreateOneWithoutValuesInput {
  create: AttributeCreateWithoutValuesInput
  connect: AttributeWhereUniqueInput
}

input AttributeCreateWithoutValuesInput {
  id: ID
  name: String!
}

"""An edge in a connection."""
type AttributeEdge {
  """The item at the end of the edge."""
  node: Attribute!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type AttributePreviousValues {
  id: ID!
  name: String!
}

type AttributeSubscriptionPayload {
  mutation: MutationType!
  node: Attribute
  updatedFields: [String!]
  previousValues: AttributePreviousValues
}

input AttributeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributeWhereInput
}

input AttributeUpdateInput {
  name: String
  values: AttributeValueUpdateManyWithoutAttributeInput
}

input AttributeUpdateManyMutationInput {
  name: String
}

input AttributeUpdateOneRequiredWithoutValuesInput {
  create: AttributeCreateWithoutValuesInput
  connect: AttributeWhereUniqueInput
  update: AttributeUpdateWithoutValuesDataInput
  upsert: AttributeUpsertWithoutValuesInput
}

input AttributeUpdateWithoutValuesDataInput {
  name: String
}

input AttributeUpsertWithoutValuesInput {
  update: AttributeUpdateWithoutValuesDataInput!
  create: AttributeCreateWithoutValuesInput!
}

type AttributeValue implements Node {
  id: ID!
  attribute: Attribute!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  value: String!
}

"""A connection to a list of items."""
type AttributeValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeValueEdge]!
  aggregate: AggregateAttributeValue!
}

input AttributeValueCreateInput {
  id: ID
  value: String!
  attribute: AttributeCreateOneWithoutValuesInput!
  products: ProductCreateManyWithoutAttributesInput
}

input AttributeValueCreateManyWithoutAttributeInput {
  create: [AttributeValueCreateWithoutAttributeInput!]
  connect: [AttributeValueWhereUniqueInput!]
}

input AttributeValueCreateManyWithoutProductsInput {
  create: [AttributeValueCreateWithoutProductsInput!]
  connect: [AttributeValueWhereUniqueInput!]
}

input AttributeValueCreateWithoutAttributeInput {
  id: ID
  value: String!
  products: ProductCreateManyWithoutAttributesInput
}

input AttributeValueCreateWithoutProductsInput {
  id: ID
  value: String!
  attribute: AttributeCreateOneWithoutValuesInput!
}

"""An edge in a connection."""
type AttributeValueEdge {
  """The item at the end of the edge."""
  node: AttributeValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributeValueOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
}

type AttributeValuePreviousValues {
  id: ID!
  value: String!
}

input AttributeValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeValueScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type AttributeValueSubscriptionPayload {
  mutation: MutationType!
  node: AttributeValue
  updatedFields: [String!]
  previousValues: AttributeValuePreviousValues
}

input AttributeValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeValueSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributeValueWhereInput
}

input AttributeValueUpdateInput {
  value: String
  attribute: AttributeUpdateOneRequiredWithoutValuesInput
  products: ProductUpdateManyWithoutAttributesInput
}

input AttributeValueUpdateManyDataInput {
  value: String
}

input AttributeValueUpdateManyMutationInput {
  value: String
}

input AttributeValueUpdateManyWithoutAttributeInput {
  create: [AttributeValueCreateWithoutAttributeInput!]
  connect: [AttributeValueWhereUniqueInput!]
  set: [AttributeValueWhereUniqueInput!]
  disconnect: [AttributeValueWhereUniqueInput!]
  delete: [AttributeValueWhereUniqueInput!]
  update: [AttributeValueUpdateWithWhereUniqueWithoutAttributeInput!]
  updateMany: [AttributeValueUpdateManyWithWhereNestedInput!]
  deleteMany: [AttributeValueScalarWhereInput!]
  upsert: [AttributeValueUpsertWithWhereUniqueWithoutAttributeInput!]
}

input AttributeValueUpdateManyWithoutProductsInput {
  create: [AttributeValueCreateWithoutProductsInput!]
  connect: [AttributeValueWhereUniqueInput!]
  set: [AttributeValueWhereUniqueInput!]
  disconnect: [AttributeValueWhereUniqueInput!]
  delete: [AttributeValueWhereUniqueInput!]
  update: [AttributeValueUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [AttributeValueUpdateManyWithWhereNestedInput!]
  deleteMany: [AttributeValueScalarWhereInput!]
  upsert: [AttributeValueUpsertWithWhereUniqueWithoutProductsInput!]
}

input AttributeValueUpdateManyWithWhereNestedInput {
  where: AttributeValueScalarWhereInput!
  data: AttributeValueUpdateManyDataInput!
}

input AttributeValueUpdateWithoutAttributeDataInput {
  value: String
  products: ProductUpdateManyWithoutAttributesInput
}

input AttributeValueUpdateWithoutProductsDataInput {
  value: String
  attribute: AttributeUpdateOneRequiredWithoutValuesInput
}

input AttributeValueUpdateWithWhereUniqueWithoutAttributeInput {
  where: AttributeValueWhereUniqueInput!
  data: AttributeValueUpdateWithoutAttributeDataInput!
}

input AttributeValueUpdateWithWhereUniqueWithoutProductsInput {
  where: AttributeValueWhereUniqueInput!
  data: AttributeValueUpdateWithoutProductsDataInput!
}

input AttributeValueUpsertWithWhereUniqueWithoutAttributeInput {
  where: AttributeValueWhereUniqueInput!
  update: AttributeValueUpdateWithoutAttributeDataInput!
  create: AttributeValueCreateWithoutAttributeInput!
}

input AttributeValueUpsertWithWhereUniqueWithoutProductsInput {
  where: AttributeValueWhereUniqueInput!
  update: AttributeValueUpdateWithoutProductsDataInput!
  create: AttributeValueCreateWithoutProductsInput!
}

input AttributeValueWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  attribute: AttributeWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input AttributeValueWhereUniqueInput {
  id: ID
}

input AttributeWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  values_every: AttributeValueWhereInput
  values_some: AttributeValueWhereInput
  values_none: AttributeValueWhereInput
}

input AttributeWhereUniqueInput {
  id: ID
}

type Audit implements Node {
  id: ID!
  code: Int!
  createdAt: DateTime!
  message: String!
  order: Order!
}

"""A connection to a list of items."""
type AuditConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuditEdge]!
  aggregate: AggregateAudit!
}

input AuditCreateInput {
  id: ID
  code: Int!
  message: String!
  order: OrderCreateOneWithoutAuditsInput!
}

input AuditCreateManyWithoutOrderInput {
  create: [AuditCreateWithoutOrderInput!]
  connect: [AuditWhereUniqueInput!]
}

input AuditCreateWithoutOrderInput {
  id: ID
  code: Int!
  message: String!
}

"""An edge in a connection."""
type AuditEdge {
  """The item at the end of the edge."""
  node: Audit!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuditOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  message_ASC
  message_DESC
}

type AuditPreviousValues {
  id: ID!
  code: Int!
  createdAt: DateTime!
  message: String!
}

input AuditScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AuditScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuditScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuditScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: Int

  """All values that are not equal to given value."""
  code_not: Int

  """All values that are contained in given list."""
  code_in: [Int!]

  """All values that are not contained in given list."""
  code_not_in: [Int!]

  """All values less than the given value."""
  code_lt: Int

  """All values less than or equal the given value."""
  code_lte: Int

  """All values greater than the given value."""
  code_gt: Int

  """All values greater than or equal the given value."""
  code_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
}

type AuditSubscriptionPayload {
  mutation: MutationType!
  node: Audit
  updatedFields: [String!]
  previousValues: AuditPreviousValues
}

input AuditSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuditSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuditSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuditSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuditWhereInput
}

input AuditUpdateInput {
  code: Int
  message: String
  order: OrderUpdateOneRequiredWithoutAuditsInput
}

input AuditUpdateManyDataInput {
  code: Int
  message: String
}

input AuditUpdateManyMutationInput {
  code: Int
  message: String
}

input AuditUpdateManyWithoutOrderInput {
  create: [AuditCreateWithoutOrderInput!]
  connect: [AuditWhereUniqueInput!]
  set: [AuditWhereUniqueInput!]
  disconnect: [AuditWhereUniqueInput!]
  delete: [AuditWhereUniqueInput!]
  update: [AuditUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [AuditUpdateManyWithWhereNestedInput!]
  deleteMany: [AuditScalarWhereInput!]
  upsert: [AuditUpsertWithWhereUniqueWithoutOrderInput!]
}

input AuditUpdateManyWithWhereNestedInput {
  where: AuditScalarWhereInput!
  data: AuditUpdateManyDataInput!
}

input AuditUpdateWithoutOrderDataInput {
  code: Int
  message: String
}

input AuditUpdateWithWhereUniqueWithoutOrderInput {
  where: AuditWhereUniqueInput!
  data: AuditUpdateWithoutOrderDataInput!
}

input AuditUpsertWithWhereUniqueWithoutOrderInput {
  where: AuditWhereUniqueInput!
  update: AuditUpdateWithoutOrderDataInput!
  create: AuditCreateWithoutOrderInput!
}

input AuditWhereInput {
  """Logical AND on all given filters."""
  AND: [AuditWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuditWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuditWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: Int

  """All values that are not equal to given value."""
  code_not: Int

  """All values that are contained in given list."""
  code_in: [Int!]

  """All values that are not contained in given list."""
  code_not_in: [Int!]

  """All values less than the given value."""
  code_lt: Int

  """All values less than or equal the given value."""
  code_lte: Int

  """All values greater than the given value."""
  code_gt: Int

  """All values greater than or equal the given value."""
  code_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  order: OrderWhereInput
}

input AuditWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Cart implements Node {
  id: ID!
  owner: Customer!
  items(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
}

"""A connection to a list of items."""
type CartConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CartEdge]!
  aggregate: AggregateCart!
}

input CartCreateInput {
  id: ID
  owner: CustomerCreateOneWithoutCartsInput!
  items: CartItemCreateManyWithoutCartInput
  orders: OrderCreateManyWithoutCartInput
}

input CartCreateManyWithoutOwnerInput {
  create: [CartCreateWithoutOwnerInput!]
  connect: [CartWhereUniqueInput!]
}

input CartCreateOneWithoutItemsInput {
  create: CartCreateWithoutItemsInput
  connect: CartWhereUniqueInput
}

input CartCreateOneWithoutOrdersInput {
  create: CartCreateWithoutOrdersInput
  connect: CartWhereUniqueInput
}

input CartCreateWithoutItemsInput {
  id: ID
  owner: CustomerCreateOneWithoutCartsInput!
  orders: OrderCreateManyWithoutCartInput
}

input CartCreateWithoutOrdersInput {
  id: ID
  owner: CustomerCreateOneWithoutCartsInput!
  items: CartItemCreateManyWithoutCartInput
}

input CartCreateWithoutOwnerInput {
  id: ID
  items: CartItemCreateManyWithoutCartInput
  orders: OrderCreateManyWithoutCartInput
}

"""An edge in a connection."""
type CartEdge {
  """The item at the end of the edge."""
  node: Cart!

  """A cursor for use in pagination."""
  cursor: String!
}

type CartItem implements Node {
  id: ID!
  attribute: String
  cart: Cart!
  product: Product!
  quantity: Int!
  price: Float!
}

"""A connection to a list of items."""
type CartItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  id: ID
  attribute: String
  quantity: Int
  price: Float!
  cart: CartCreateOneWithoutItemsInput!
  product: ProductCreateOneWithoutCartsPresentInInput!
}

input CartItemCreateManyWithoutCartInput {
  create: [CartItemCreateWithoutCartInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateManyWithoutProductInput {
  create: [CartItemCreateWithoutProductInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateWithoutCartInput {
  id: ID
  attribute: String
  quantity: Int
  price: Float!
  product: ProductCreateOneWithoutCartsPresentInInput!
}

input CartItemCreateWithoutProductInput {
  id: ID
  attribute: String
  quantity: Int
  price: Float!
  cart: CartCreateOneWithoutItemsInput!
}

"""An edge in a connection."""
type CartItemEdge {
  """The item at the end of the edge."""
  node: CartItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  attribute_ASC
  attribute_DESC
  quantity_ASC
  quantity_DESC
  price_ASC
  price_DESC
}

type CartItemPreviousValues {
  id: ID!
  attribute: String
  quantity: Int!
  price: Float!
}

input CartItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  attribute: String

  """All values that are not equal to given value."""
  attribute_not: String

  """All values that are contained in given list."""
  attribute_in: [String!]

  """All values that are not contained in given list."""
  attribute_not_in: [String!]

  """All values less than the given value."""
  attribute_lt: String

  """All values less than or equal the given value."""
  attribute_lte: String

  """All values greater than the given value."""
  attribute_gt: String

  """All values greater than or equal the given value."""
  attribute_gte: String

  """All values containing the given string."""
  attribute_contains: String

  """All values not containing the given string."""
  attribute_not_contains: String

  """All values starting with the given string."""
  attribute_starts_with: String

  """All values not starting with the given string."""
  attribute_not_starts_with: String

  """All values ending with the given string."""
  attribute_ends_with: String

  """All values not ending with the given string."""
  attribute_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
}

input CartItemUpdateInput {
  attribute: String
  quantity: Int
  price: Float
  cart: CartUpdateOneRequiredWithoutItemsInput
  product: ProductUpdateOneRequiredWithoutCartsPresentInInput
}

input CartItemUpdateManyDataInput {
  attribute: String
  quantity: Int
  price: Float
}

input CartItemUpdateManyMutationInput {
  attribute: String
  quantity: Int
  price: Float
}

input CartItemUpdateManyWithoutCartInput {
  create: [CartItemCreateWithoutCartInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  delete: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutCartInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
  deleteMany: [CartItemScalarWhereInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutCartInput!]
}

input CartItemUpdateManyWithoutProductInput {
  create: [CartItemCreateWithoutProductInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  delete: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
  deleteMany: [CartItemScalarWhereInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutProductInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput!
  data: CartItemUpdateManyDataInput!
}

input CartItemUpdateWithoutCartDataInput {
  attribute: String
  quantity: Int
  price: Float
  product: ProductUpdateOneRequiredWithoutCartsPresentInInput
}

input CartItemUpdateWithoutProductDataInput {
  attribute: String
  quantity: Int
  price: Float
  cart: CartUpdateOneRequiredWithoutItemsInput
}

input CartItemUpdateWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutCartDataInput!
}

input CartItemUpdateWithWhereUniqueWithoutProductInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutProductDataInput!
}

input CartItemUpsertWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutCartDataInput!
  create: CartItemCreateWithoutCartInput!
}

input CartItemUpsertWithWhereUniqueWithoutProductInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutProductDataInput!
  create: CartItemCreateWithoutProductInput!
}

input CartItemWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  attribute: String

  """All values that are not equal to given value."""
  attribute_not: String

  """All values that are contained in given list."""
  attribute_in: [String!]

  """All values that are not contained in given list."""
  attribute_not_in: [String!]

  """All values less than the given value."""
  attribute_lt: String

  """All values less than or equal the given value."""
  attribute_lte: String

  """All values greater than the given value."""
  attribute_gt: String

  """All values greater than or equal the given value."""
  attribute_gte: String

  """All values containing the given string."""
  attribute_contains: String

  """All values not containing the given string."""
  attribute_not_contains: String

  """All values starting with the given string."""
  attribute_starts_with: String

  """All values not starting with the given string."""
  attribute_not_starts_with: String

  """All values ending with the given string."""
  attribute_ends_with: String

  """All values not ending with the given string."""
  attribute_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  cart: CartWhereInput
  product: ProductWhereInput
}

input CartItemWhereUniqueInput {
  id: ID
}

enum CartOrderByInput {
  id_ASC
  id_DESC
}

type CartPreviousValues {
  id: ID!
}

input CartScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CartScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type CartSubscriptionPayload {
  mutation: MutationType!
  node: Cart
  updatedFields: [String!]
  previousValues: CartPreviousValues
}

input CartSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CartSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CartWhereInput
}

input CartUpdateInput {
  owner: CustomerUpdateOneRequiredWithoutCartsInput
  items: CartItemUpdateManyWithoutCartInput
  orders: OrderUpdateManyWithoutCartInput
}

input CartUpdateManyWithoutOwnerInput {
  create: [CartCreateWithoutOwnerInput!]
  connect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  delete: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [CartScalarWhereInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CartUpdateOneRequiredWithoutItemsInput {
  create: CartCreateWithoutItemsInput
  connect: CartWhereUniqueInput
  update: CartUpdateWithoutItemsDataInput
  upsert: CartUpsertWithoutItemsInput
}

input CartUpdateOneRequiredWithoutOrdersInput {
  create: CartCreateWithoutOrdersInput
  connect: CartWhereUniqueInput
  update: CartUpdateWithoutOrdersDataInput
  upsert: CartUpsertWithoutOrdersInput
}

input CartUpdateWithoutItemsDataInput {
  owner: CustomerUpdateOneRequiredWithoutCartsInput
  orders: OrderUpdateManyWithoutCartInput
}

input CartUpdateWithoutOrdersDataInput {
  owner: CustomerUpdateOneRequiredWithoutCartsInput
  items: CartItemUpdateManyWithoutCartInput
}

input CartUpdateWithoutOwnerDataInput {
  items: CartItemUpdateManyWithoutCartInput
  orders: OrderUpdateManyWithoutCartInput
}

input CartUpdateWithWhereUniqueWithoutOwnerInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutOwnerDataInput!
}

input CartUpsertWithoutItemsInput {
  update: CartUpdateWithoutItemsDataInput!
  create: CartCreateWithoutItemsInput!
}

input CartUpsertWithoutOrdersInput {
  update: CartUpdateWithoutOrdersDataInput!
  create: CartCreateWithoutOrdersInput!
}

input CartUpsertWithWhereUniqueWithoutOwnerInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutOwnerDataInput!
  create: CartCreateWithoutOwnerInput!
}

input CartWhereInput {
  """Logical AND on all given filters."""
  AND: [CartWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  owner: CustomerWhereInput
  items_every: CartItemWhereInput
  items_some: CartItemWhereInput
  items_none: CartItemWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input CartWhereUniqueInput {
  id: ID
}

type Category implements Node {
  id: ID!
  department: Department!
  description: String!
  name: String!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  description: String!
  name: String!
  department: DepartmentCreateOneWithoutCategoriesInput!
  products: ProductCreateManyWithoutCategoriesInput
}

input CategoryCreateManyWithoutDepartmentInput {
  create: [CategoryCreateWithoutDepartmentInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateManyWithoutProductsInput {
  create: [CategoryCreateWithoutProductsInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutDepartmentInput {
  id: ID
  description: String!
  name: String!
  products: ProductCreateManyWithoutCategoriesInput
}

input CategoryCreateWithoutProductsInput {
  id: ID
  description: String!
  name: String!
  department: DepartmentCreateOneWithoutCategoriesInput!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
}

type CategoryPreviousValues {
  id: ID!
  description: String!
  name: String!
}

input CategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  description: String
  name: String
  department: DepartmentUpdateOneRequiredWithoutCategoriesInput
  products: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateManyDataInput {
  description: String
  name: String
}

input CategoryUpdateManyMutationInput {
  description: String
  name: String
}

input CategoryUpdateManyWithoutDepartmentInput {
  create: [CategoryCreateWithoutDepartmentInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CategoryScalarWhereInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input CategoryUpdateManyWithoutProductsInput {
  create: [CategoryCreateWithoutProductsInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CategoryScalarWhereInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutDepartmentDataInput {
  description: String
  name: String
  products: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateWithoutProductsDataInput {
  description: String
  name: String
  department: DepartmentUpdateOneRequiredWithoutCategoriesInput
}

input CategoryUpdateWithWhereUniqueWithoutDepartmentInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutDepartmentDataInput!
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutProductsDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutDepartmentInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutDepartmentDataInput!
  create: CategoryCreateWithoutDepartmentInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  department: DepartmentWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

type Customer implements Node {
  id: ID!
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  password: String!
  postalCode: String
  region: String
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  shippingRegion: ShippingRegion
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart!]
}

"""A connection to a list of items."""
type CustomerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: ID
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  password: String!
  postalCode: String
  region: String
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  shippingRegion: ShippingRegionCreateOneWithoutCustomersInput
  carts: CartCreateManyWithoutOwnerInput
}

input CustomerCreateManyWithoutShippingRegionInput {
  create: [CustomerCreateWithoutShippingRegionInput!]
  connect: [CustomerWhereUniqueInput!]
}

input CustomerCreateOneWithoutCartsInput {
  create: CustomerCreateWithoutCartsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutReviewsInput {
  create: CustomerCreateWithoutReviewsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutCartsInput {
  id: ID
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  password: String!
  postalCode: String
  region: String
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  shippingRegion: ShippingRegionCreateOneWithoutCustomersInput
}

input CustomerCreateWithoutOrdersInput {
  id: ID
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  password: String!
  postalCode: String
  region: String
  reviews: ReviewCreateManyWithoutCustomerInput
  shippingRegion: ShippingRegionCreateOneWithoutCustomersInput
  carts: CartCreateManyWithoutOwnerInput
}

input CustomerCreateWithoutReviewsInput {
  id: ID
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  password: String!
  postalCode: String
  region: String
  orders: OrderCreateManyWithoutCustomerInput
  shippingRegion: ShippingRegionCreateOneWithoutCustomersInput
  carts: CartCreateManyWithoutOwnerInput
}

input CustomerCreateWithoutShippingRegionInput {
  id: ID
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  password: String!
  postalCode: String
  region: String
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  carts: CartCreateManyWithoutOwnerInput
}

"""An edge in a connection."""
type CustomerEdge {
  """The item at the end of the edge."""
  node: Customer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  creditCard_ASC
  creditCard_DESC
  dayPhone_ASC
  dayPhone_DESC
  email_ASC
  email_DESC
  evePhone_ASC
  evePhone_DESC
  mobPhone_ASC
  mobPhone_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  postalCode_ASC
  postalCode_DESC
  region_ASC
  region_DESC
}

type CustomerPreviousValues {
  id: ID!
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String!
  evePhone: String
  mobPhone: String
  name: String!
  password: String!
  postalCode: String
  region: String
}

input CustomerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  creditCard: String

  """All values that are not equal to given value."""
  creditCard_not: String

  """All values that are contained in given list."""
  creditCard_in: [String!]

  """All values that are not contained in given list."""
  creditCard_not_in: [String!]

  """All values less than the given value."""
  creditCard_lt: String

  """All values less than or equal the given value."""
  creditCard_lte: String

  """All values greater than the given value."""
  creditCard_gt: String

  """All values greater than or equal the given value."""
  creditCard_gte: String

  """All values containing the given string."""
  creditCard_contains: String

  """All values not containing the given string."""
  creditCard_not_contains: String

  """All values starting with the given string."""
  creditCard_starts_with: String

  """All values not starting with the given string."""
  creditCard_not_starts_with: String

  """All values ending with the given string."""
  creditCard_ends_with: String

  """All values not ending with the given string."""
  creditCard_not_ends_with: String
  dayPhone: String

  """All values that are not equal to given value."""
  dayPhone_not: String

  """All values that are contained in given list."""
  dayPhone_in: [String!]

  """All values that are not contained in given list."""
  dayPhone_not_in: [String!]

  """All values less than the given value."""
  dayPhone_lt: String

  """All values less than or equal the given value."""
  dayPhone_lte: String

  """All values greater than the given value."""
  dayPhone_gt: String

  """All values greater than or equal the given value."""
  dayPhone_gte: String

  """All values containing the given string."""
  dayPhone_contains: String

  """All values not containing the given string."""
  dayPhone_not_contains: String

  """All values starting with the given string."""
  dayPhone_starts_with: String

  """All values not starting with the given string."""
  dayPhone_not_starts_with: String

  """All values ending with the given string."""
  dayPhone_ends_with: String

  """All values not ending with the given string."""
  dayPhone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  evePhone: String

  """All values that are not equal to given value."""
  evePhone_not: String

  """All values that are contained in given list."""
  evePhone_in: [String!]

  """All values that are not contained in given list."""
  evePhone_not_in: [String!]

  """All values less than the given value."""
  evePhone_lt: String

  """All values less than or equal the given value."""
  evePhone_lte: String

  """All values greater than the given value."""
  evePhone_gt: String

  """All values greater than or equal the given value."""
  evePhone_gte: String

  """All values containing the given string."""
  evePhone_contains: String

  """All values not containing the given string."""
  evePhone_not_contains: String

  """All values starting with the given string."""
  evePhone_starts_with: String

  """All values not starting with the given string."""
  evePhone_not_starts_with: String

  """All values ending with the given string."""
  evePhone_ends_with: String

  """All values not ending with the given string."""
  evePhone_not_ends_with: String
  mobPhone: String

  """All values that are not equal to given value."""
  mobPhone_not: String

  """All values that are contained in given list."""
  mobPhone_in: [String!]

  """All values that are not contained in given list."""
  mobPhone_not_in: [String!]

  """All values less than the given value."""
  mobPhone_lt: String

  """All values less than or equal the given value."""
  mobPhone_lte: String

  """All values greater than the given value."""
  mobPhone_gt: String

  """All values greater than or equal the given value."""
  mobPhone_gte: String

  """All values containing the given string."""
  mobPhone_contains: String

  """All values not containing the given string."""
  mobPhone_not_contains: String

  """All values starting with the given string."""
  mobPhone_starts_with: String

  """All values not starting with the given string."""
  mobPhone_not_starts_with: String

  """All values ending with the given string."""
  mobPhone_ends_with: String

  """All values not ending with the given string."""
  mobPhone_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  shippingRegion: ShippingRegionUpdateOneWithoutCustomersInput
  carts: CartUpdateManyWithoutOwnerInput
}

input CustomerUpdateManyDataInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
}

input CustomerUpdateManyMutationInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
}

input CustomerUpdateManyWithoutShippingRegionInput {
  create: [CustomerCreateWithoutShippingRegionInput!]
  connect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  disconnect: [CustomerWhereUniqueInput!]
  delete: [CustomerWhereUniqueInput!]
  update: [CustomerUpdateWithWhereUniqueWithoutShippingRegionInput!]
  updateMany: [CustomerUpdateManyWithWhereNestedInput!]
  deleteMany: [CustomerScalarWhereInput!]
  upsert: [CustomerUpsertWithWhereUniqueWithoutShippingRegionInput!]
}

input CustomerUpdateManyWithWhereNestedInput {
  where: CustomerScalarWhereInput!
  data: CustomerUpdateManyDataInput!
}

input CustomerUpdateOneRequiredWithoutCartsInput {
  create: CustomerCreateWithoutCartsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutCartsDataInput
  upsert: CustomerUpsertWithoutCartsInput
}

input CustomerUpdateOneRequiredWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutOrdersDataInput
  upsert: CustomerUpsertWithoutOrdersInput
}

input CustomerUpdateOneRequiredWithoutReviewsInput {
  create: CustomerCreateWithoutReviewsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutReviewsDataInput
  upsert: CustomerUpsertWithoutReviewsInput
}

input CustomerUpdateWithoutCartsDataInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  shippingRegion: ShippingRegionUpdateOneWithoutCustomersInput
}

input CustomerUpdateWithoutOrdersDataInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
  reviews: ReviewUpdateManyWithoutCustomerInput
  shippingRegion: ShippingRegionUpdateOneWithoutCustomersInput
  carts: CartUpdateManyWithoutOwnerInput
}

input CustomerUpdateWithoutReviewsDataInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
  orders: OrderUpdateManyWithoutCustomerInput
  shippingRegion: ShippingRegionUpdateOneWithoutCustomersInput
  carts: CartUpdateManyWithoutOwnerInput
}

input CustomerUpdateWithoutShippingRegionDataInput {
  address1: String
  address2: String
  city: String
  country: String
  creditCard: String
  dayPhone: String
  email: String
  evePhone: String
  mobPhone: String
  name: String
  password: String
  postalCode: String
  region: String
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  carts: CartUpdateManyWithoutOwnerInput
}

input CustomerUpdateWithWhereUniqueWithoutShippingRegionInput {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateWithoutShippingRegionDataInput!
}

input CustomerUpsertWithoutCartsInput {
  update: CustomerUpdateWithoutCartsDataInput!
  create: CustomerCreateWithoutCartsInput!
}

input CustomerUpsertWithoutOrdersInput {
  update: CustomerUpdateWithoutOrdersDataInput!
  create: CustomerCreateWithoutOrdersInput!
}

input CustomerUpsertWithoutReviewsInput {
  update: CustomerUpdateWithoutReviewsDataInput!
  create: CustomerCreateWithoutReviewsInput!
}

input CustomerUpsertWithWhereUniqueWithoutShippingRegionInput {
  where: CustomerWhereUniqueInput!
  update: CustomerUpdateWithoutShippingRegionDataInput!
  create: CustomerCreateWithoutShippingRegionInput!
}

input CustomerWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  creditCard: String

  """All values that are not equal to given value."""
  creditCard_not: String

  """All values that are contained in given list."""
  creditCard_in: [String!]

  """All values that are not contained in given list."""
  creditCard_not_in: [String!]

  """All values less than the given value."""
  creditCard_lt: String

  """All values less than or equal the given value."""
  creditCard_lte: String

  """All values greater than the given value."""
  creditCard_gt: String

  """All values greater than or equal the given value."""
  creditCard_gte: String

  """All values containing the given string."""
  creditCard_contains: String

  """All values not containing the given string."""
  creditCard_not_contains: String

  """All values starting with the given string."""
  creditCard_starts_with: String

  """All values not starting with the given string."""
  creditCard_not_starts_with: String

  """All values ending with the given string."""
  creditCard_ends_with: String

  """All values not ending with the given string."""
  creditCard_not_ends_with: String
  dayPhone: String

  """All values that are not equal to given value."""
  dayPhone_not: String

  """All values that are contained in given list."""
  dayPhone_in: [String!]

  """All values that are not contained in given list."""
  dayPhone_not_in: [String!]

  """All values less than the given value."""
  dayPhone_lt: String

  """All values less than or equal the given value."""
  dayPhone_lte: String

  """All values greater than the given value."""
  dayPhone_gt: String

  """All values greater than or equal the given value."""
  dayPhone_gte: String

  """All values containing the given string."""
  dayPhone_contains: String

  """All values not containing the given string."""
  dayPhone_not_contains: String

  """All values starting with the given string."""
  dayPhone_starts_with: String

  """All values not starting with the given string."""
  dayPhone_not_starts_with: String

  """All values ending with the given string."""
  dayPhone_ends_with: String

  """All values not ending with the given string."""
  dayPhone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  evePhone: String

  """All values that are not equal to given value."""
  evePhone_not: String

  """All values that are contained in given list."""
  evePhone_in: [String!]

  """All values that are not contained in given list."""
  evePhone_not_in: [String!]

  """All values less than the given value."""
  evePhone_lt: String

  """All values less than or equal the given value."""
  evePhone_lte: String

  """All values greater than the given value."""
  evePhone_gt: String

  """All values greater than or equal the given value."""
  evePhone_gte: String

  """All values containing the given string."""
  evePhone_contains: String

  """All values not containing the given string."""
  evePhone_not_contains: String

  """All values starting with the given string."""
  evePhone_starts_with: String

  """All values not starting with the given string."""
  evePhone_not_starts_with: String

  """All values ending with the given string."""
  evePhone_ends_with: String

  """All values not ending with the given string."""
  evePhone_not_ends_with: String
  mobPhone: String

  """All values that are not equal to given value."""
  mobPhone_not: String

  """All values that are contained in given list."""
  mobPhone_in: [String!]

  """All values that are not contained in given list."""
  mobPhone_not_in: [String!]

  """All values less than the given value."""
  mobPhone_lt: String

  """All values less than or equal the given value."""
  mobPhone_lte: String

  """All values greater than the given value."""
  mobPhone_gt: String

  """All values greater than or equal the given value."""
  mobPhone_gte: String

  """All values containing the given string."""
  mobPhone_contains: String

  """All values not containing the given string."""
  mobPhone_not_contains: String

  """All values starting with the given string."""
  mobPhone_starts_with: String

  """All values not starting with the given string."""
  mobPhone_not_starts_with: String

  """All values ending with the given string."""
  mobPhone_ends_with: String

  """All values not ending with the given string."""
  mobPhone_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  region: String

  """All values that are not equal to given value."""
  region_not: String

  """All values that are contained in given list."""
  region_in: [String!]

  """All values that are not contained in given list."""
  region_not_in: [String!]

  """All values less than the given value."""
  region_lt: String

  """All values less than or equal the given value."""
  region_lte: String

  """All values greater than the given value."""
  region_gt: String

  """All values greater than or equal the given value."""
  region_gte: String

  """All values containing the given string."""
  region_contains: String

  """All values not containing the given string."""
  region_not_contains: String

  """All values starting with the given string."""
  region_starts_with: String

  """All values not starting with the given string."""
  region_not_starts_with: String

  """All values ending with the given string."""
  region_ends_with: String

  """All values not ending with the given string."""
  region_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  shippingRegion: ShippingRegionWhereInput
  carts_every: CartWhereInput
  carts_some: CartWhereInput
  carts_none: CartWhereInput
}

input CustomerWhereUniqueInput {
  id: ID
  email: String
}

scalar DateTime

type Department implements Node {
  id: ID!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  description: String!
  name: String!
}

"""A connection to a list of items."""
type DepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  description: String!
  name: String!
  categories: CategoryCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneWithoutCategoriesInput {
  create: DepartmentCreateWithoutCategoriesInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutCategoriesInput {
  id: ID
  description: String!
  name: String!
}

"""An edge in a connection."""
type DepartmentEdge {
  """The item at the end of the edge."""
  node: Department!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  description: String!
  name: String!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartmentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
}

input DepartmentUpdateInput {
  description: String
  name: String
  categories: CategoryUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyMutationInput {
  description: String
  name: String
}

input DepartmentUpdateOneRequiredWithoutCategoriesInput {
  create: DepartmentCreateWithoutCategoriesInput
  connect: DepartmentWhereUniqueInput
  update: DepartmentUpdateWithoutCategoriesDataInput
  upsert: DepartmentUpsertWithoutCategoriesInput
}

input DepartmentUpdateWithoutCategoriesDataInput {
  description: String
  name: String
}

input DepartmentUpsertWithoutCategoriesInput {
  update: DepartmentUpdateWithoutCategoriesDataInput!
  create: DepartmentCreateWithoutCategoriesInput!
}

input DepartmentWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
}

input DepartmentWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAttribute(data: AttributeCreateInput!): Attribute!
  createAttributeValue(data: AttributeValueCreateInput!): AttributeValue!
  createAudit(data: AuditCreateInput!): Audit!
  createCategory(data: CategoryCreateInput!): Category!
  createCustomer(data: CustomerCreateInput!): Customer!
  createDepartment(data: DepartmentCreateInput!): Department!
  createOrder(data: OrderCreateInput!): Order!
  createCartItem(data: CartItemCreateInput!): CartItem!
  createProduct(data: ProductCreateInput!): Product!
  createReview(data: ReviewCreateInput!): Review!
  createShipping(data: ShippingCreateInput!): Shipping!
  createShippingRegion(data: ShippingRegionCreateInput!): ShippingRegion!
  createCart(data: CartCreateInput!): Cart!
  createTax(data: TaxCreateInput!): Tax!
  updateAttribute(data: AttributeUpdateInput!, where: AttributeWhereUniqueInput!): Attribute
  updateAttributeValue(data: AttributeValueUpdateInput!, where: AttributeValueWhereUniqueInput!): AttributeValue
  updateAudit(data: AuditUpdateInput!, where: AuditWhereUniqueInput!): Audit
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateShipping(data: ShippingUpdateInput!, where: ShippingWhereUniqueInput!): Shipping
  updateShippingRegion(data: ShippingRegionUpdateInput!, where: ShippingRegionWhereUniqueInput!): ShippingRegion
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateTax(data: TaxUpdateInput!, where: TaxWhereUniqueInput!): Tax
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteAttributeValue(where: AttributeValueWhereUniqueInput!): AttributeValue
  deleteAudit(where: AuditWhereUniqueInput!): Audit
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteShipping(where: ShippingWhereUniqueInput!): Shipping
  deleteShippingRegion(where: ShippingRegionWhereUniqueInput!): ShippingRegion
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteTax(where: TaxWhereUniqueInput!): Tax
  upsertAttribute(where: AttributeWhereUniqueInput!, create: AttributeCreateInput!, update: AttributeUpdateInput!): Attribute!
  upsertAttributeValue(where: AttributeValueWhereUniqueInput!, create: AttributeValueCreateInput!, update: AttributeValueUpdateInput!): AttributeValue!
  upsertAudit(where: AuditWhereUniqueInput!, create: AuditCreateInput!, update: AuditUpdateInput!): Audit!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertCartItem(where: CartItemWhereUniqueInput!, create: CartItemCreateInput!, update: CartItemUpdateInput!): CartItem!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertShipping(where: ShippingWhereUniqueInput!, create: ShippingCreateInput!, update: ShippingUpdateInput!): Shipping!
  upsertShippingRegion(where: ShippingRegionWhereUniqueInput!, create: ShippingRegionCreateInput!, update: ShippingRegionUpdateInput!): ShippingRegion!
  upsertCart(where: CartWhereUniqueInput!, create: CartCreateInput!, update: CartUpdateInput!): Cart!
  upsertTax(where: TaxWhereUniqueInput!, create: TaxCreateInput!, update: TaxUpdateInput!): Tax!
  updateManyAttributes(data: AttributeUpdateManyMutationInput!, where: AttributeWhereInput): BatchPayload!
  updateManyAttributeValues(data: AttributeValueUpdateManyMutationInput!, where: AttributeValueWhereInput): BatchPayload!
  updateManyAudits(data: AuditUpdateManyMutationInput!, where: AuditWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyShippings(data: ShippingUpdateManyMutationInput!, where: ShippingWhereInput): BatchPayload!
  updateManyShippingRegions(data: ShippingRegionUpdateManyMutationInput!, where: ShippingRegionWhereInput): BatchPayload!
  updateManyTaxes(data: TaxUpdateManyMutationInput!, where: TaxWhereInput): BatchPayload!
  deleteManyAttributes(where: AttributeWhereInput): BatchPayload!
  deleteManyAttributeValues(where: AttributeValueWhereInput): BatchPayload!
  deleteManyAudits(where: AuditWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyShippings(where: ShippingWhereInput): BatchPayload!
  deleteManyShippingRegions(where: ShippingRegionWhereInput): BatchPayload!
  deleteManyCarts(where: CartWhereInput): BatchPayload!
  deleteManyTaxes(where: TaxWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  audits(where: AuditWhereInput, orderBy: AuditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audit!]
  authCode: String
  cart: Cart!
  comments: String
  createdAt: DateTime!
  customer: Customer!
  references: String
  shippedOn: DateTime
  shippingDetails: Shipping!
  status: Int!
  tax: Tax!
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditCreateManyWithoutOrderInput
  cart: CartCreateOneWithoutOrdersInput!
  customer: CustomerCreateOneWithoutOrdersInput!
  shippingDetails: ShippingCreateOneWithoutOrdersInput!
  tax: TaxCreateOneWithoutOrdersInput!
}

input OrderCreateManyWithoutCartInput {
  create: [OrderCreateWithoutCartInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutShippingDetailsInput {
  create: [OrderCreateWithoutShippingDetailsInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutTaxInput {
  create: [OrderCreateWithoutTaxInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutAuditsInput {
  create: OrderCreateWithoutAuditsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutAuditsInput {
  id: ID
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  cart: CartCreateOneWithoutOrdersInput!
  customer: CustomerCreateOneWithoutOrdersInput!
  shippingDetails: ShippingCreateOneWithoutOrdersInput!
  tax: TaxCreateOneWithoutOrdersInput!
}

input OrderCreateWithoutCartInput {
  id: ID
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditCreateManyWithoutOrderInput
  customer: CustomerCreateOneWithoutOrdersInput!
  shippingDetails: ShippingCreateOneWithoutOrdersInput!
  tax: TaxCreateOneWithoutOrdersInput!
}

input OrderCreateWithoutCustomerInput {
  id: ID
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditCreateManyWithoutOrderInput
  cart: CartCreateOneWithoutOrdersInput!
  shippingDetails: ShippingCreateOneWithoutOrdersInput!
  tax: TaxCreateOneWithoutOrdersInput!
}

input OrderCreateWithoutShippingDetailsInput {
  id: ID
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditCreateManyWithoutOrderInput
  cart: CartCreateOneWithoutOrdersInput!
  customer: CustomerCreateOneWithoutOrdersInput!
  tax: TaxCreateOneWithoutOrdersInput!
}

input OrderCreateWithoutTaxInput {
  id: ID
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditCreateManyWithoutOrderInput
  cart: CartCreateOneWithoutOrdersInput!
  customer: CustomerCreateOneWithoutOrdersInput!
  shippingDetails: ShippingCreateOneWithoutOrdersInput!
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  authCode_ASC
  authCode_DESC
  comments_ASC
  comments_DESC
  createdAt_ASC
  createdAt_DESC
  references_ASC
  references_DESC
  shippedOn_ASC
  shippedOn_DESC
  status_ASC
  status_DESC
}

type OrderPreviousValues {
  id: ID!
  authCode: String
  comments: String
  createdAt: DateTime!
  references: String
  shippedOn: DateTime
  status: Int!
}

input OrderScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  authCode: String

  """All values that are not equal to given value."""
  authCode_not: String

  """All values that are contained in given list."""
  authCode_in: [String!]

  """All values that are not contained in given list."""
  authCode_not_in: [String!]

  """All values less than the given value."""
  authCode_lt: String

  """All values less than or equal the given value."""
  authCode_lte: String

  """All values greater than the given value."""
  authCode_gt: String

  """All values greater than or equal the given value."""
  authCode_gte: String

  """All values containing the given string."""
  authCode_contains: String

  """All values not containing the given string."""
  authCode_not_contains: String

  """All values starting with the given string."""
  authCode_starts_with: String

  """All values not starting with the given string."""
  authCode_not_starts_with: String

  """All values ending with the given string."""
  authCode_ends_with: String

  """All values not ending with the given string."""
  authCode_not_ends_with: String
  comments: String

  """All values that are not equal to given value."""
  comments_not: String

  """All values that are contained in given list."""
  comments_in: [String!]

  """All values that are not contained in given list."""
  comments_not_in: [String!]

  """All values less than the given value."""
  comments_lt: String

  """All values less than or equal the given value."""
  comments_lte: String

  """All values greater than the given value."""
  comments_gt: String

  """All values greater than or equal the given value."""
  comments_gte: String

  """All values containing the given string."""
  comments_contains: String

  """All values not containing the given string."""
  comments_not_contains: String

  """All values starting with the given string."""
  comments_starts_with: String

  """All values not starting with the given string."""
  comments_not_starts_with: String

  """All values ending with the given string."""
  comments_ends_with: String

  """All values not ending with the given string."""
  comments_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  references: String

  """All values that are not equal to given value."""
  references_not: String

  """All values that are contained in given list."""
  references_in: [String!]

  """All values that are not contained in given list."""
  references_not_in: [String!]

  """All values less than the given value."""
  references_lt: String

  """All values less than or equal the given value."""
  references_lte: String

  """All values greater than the given value."""
  references_gt: String

  """All values greater than or equal the given value."""
  references_gte: String

  """All values containing the given string."""
  references_contains: String

  """All values not containing the given string."""
  references_not_contains: String

  """All values starting with the given string."""
  references_starts_with: String

  """All values not starting with the given string."""
  references_not_starts_with: String

  """All values ending with the given string."""
  references_ends_with: String

  """All values not ending with the given string."""
  references_not_ends_with: String
  shippedOn: DateTime

  """All values that are not equal to given value."""
  shippedOn_not: DateTime

  """All values that are contained in given list."""
  shippedOn_in: [DateTime!]

  """All values that are not contained in given list."""
  shippedOn_not_in: [DateTime!]

  """All values less than the given value."""
  shippedOn_lt: DateTime

  """All values less than or equal the given value."""
  shippedOn_lte: DateTime

  """All values greater than the given value."""
  shippedOn_gt: DateTime

  """All values greater than or equal the given value."""
  shippedOn_gte: DateTime
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditUpdateManyWithoutOrderInput
  cart: CartUpdateOneRequiredWithoutOrdersInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  shippingDetails: ShippingUpdateOneRequiredWithoutOrdersInput
  tax: TaxUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateManyDataInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
}

input OrderUpdateManyMutationInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
}

input OrderUpdateManyWithoutCartInput {
  create: [OrderCreateWithoutCartInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCartInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderScalarWhereInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCartInput!]
}

input OrderUpdateManyWithoutCustomerInput {
  create: [OrderCreateWithoutCustomerInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderScalarWhereInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithoutShippingDetailsInput {
  create: [OrderCreateWithoutShippingDetailsInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutShippingDetailsInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderScalarWhereInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutShippingDetailsInput!]
}

input OrderUpdateManyWithoutTaxInput {
  create: [OrderCreateWithoutTaxInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutTaxInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderScalarWhereInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutTaxInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateOneRequiredWithoutAuditsInput {
  create: OrderCreateWithoutAuditsInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateWithoutAuditsDataInput
  upsert: OrderUpsertWithoutAuditsInput
}

input OrderUpdateWithoutAuditsDataInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  cart: CartUpdateOneRequiredWithoutOrdersInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  shippingDetails: ShippingUpdateOneRequiredWithoutOrdersInput
  tax: TaxUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithoutCartDataInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditUpdateManyWithoutOrderInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  shippingDetails: ShippingUpdateOneRequiredWithoutOrdersInput
  tax: TaxUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithoutCustomerDataInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditUpdateManyWithoutOrderInput
  cart: CartUpdateOneRequiredWithoutOrdersInput
  shippingDetails: ShippingUpdateOneRequiredWithoutOrdersInput
  tax: TaxUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithoutShippingDetailsDataInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditUpdateManyWithoutOrderInput
  cart: CartUpdateOneRequiredWithoutOrdersInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  tax: TaxUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithoutTaxDataInput {
  authCode: String
  comments: String
  references: String
  shippedOn: DateTime
  status: Int
  audits: AuditUpdateManyWithoutOrderInput
  cart: CartUpdateOneRequiredWithoutOrdersInput
  customer: CustomerUpdateOneRequiredWithoutOrdersInput
  shippingDetails: ShippingUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateWithWhereUniqueWithoutCartInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCartDataInput!
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCustomerDataInput!
}

input OrderUpdateWithWhereUniqueWithoutShippingDetailsInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutShippingDetailsDataInput!
}

input OrderUpdateWithWhereUniqueWithoutTaxInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutTaxDataInput!
}

input OrderUpsertWithoutAuditsInput {
  update: OrderUpdateWithoutAuditsDataInput!
  create: OrderCreateWithoutAuditsInput!
}

input OrderUpsertWithWhereUniqueWithoutCartInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCartDataInput!
  create: OrderCreateWithoutCartInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCustomerDataInput!
  create: OrderCreateWithoutCustomerInput!
}

input OrderUpsertWithWhereUniqueWithoutShippingDetailsInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutShippingDetailsDataInput!
  create: OrderCreateWithoutShippingDetailsInput!
}

input OrderUpsertWithWhereUniqueWithoutTaxInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutTaxDataInput!
  create: OrderCreateWithoutTaxInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  authCode: String

  """All values that are not equal to given value."""
  authCode_not: String

  """All values that are contained in given list."""
  authCode_in: [String!]

  """All values that are not contained in given list."""
  authCode_not_in: [String!]

  """All values less than the given value."""
  authCode_lt: String

  """All values less than or equal the given value."""
  authCode_lte: String

  """All values greater than the given value."""
  authCode_gt: String

  """All values greater than or equal the given value."""
  authCode_gte: String

  """All values containing the given string."""
  authCode_contains: String

  """All values not containing the given string."""
  authCode_not_contains: String

  """All values starting with the given string."""
  authCode_starts_with: String

  """All values not starting with the given string."""
  authCode_not_starts_with: String

  """All values ending with the given string."""
  authCode_ends_with: String

  """All values not ending with the given string."""
  authCode_not_ends_with: String
  comments: String

  """All values that are not equal to given value."""
  comments_not: String

  """All values that are contained in given list."""
  comments_in: [String!]

  """All values that are not contained in given list."""
  comments_not_in: [String!]

  """All values less than the given value."""
  comments_lt: String

  """All values less than or equal the given value."""
  comments_lte: String

  """All values greater than the given value."""
  comments_gt: String

  """All values greater than or equal the given value."""
  comments_gte: String

  """All values containing the given string."""
  comments_contains: String

  """All values not containing the given string."""
  comments_not_contains: String

  """All values starting with the given string."""
  comments_starts_with: String

  """All values not starting with the given string."""
  comments_not_starts_with: String

  """All values ending with the given string."""
  comments_ends_with: String

  """All values not ending with the given string."""
  comments_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  references: String

  """All values that are not equal to given value."""
  references_not: String

  """All values that are contained in given list."""
  references_in: [String!]

  """All values that are not contained in given list."""
  references_not_in: [String!]

  """All values less than the given value."""
  references_lt: String

  """All values less than or equal the given value."""
  references_lte: String

  """All values greater than the given value."""
  references_gt: String

  """All values greater than or equal the given value."""
  references_gte: String

  """All values containing the given string."""
  references_contains: String

  """All values not containing the given string."""
  references_not_contains: String

  """All values starting with the given string."""
  references_starts_with: String

  """All values not starting with the given string."""
  references_not_starts_with: String

  """All values ending with the given string."""
  references_ends_with: String

  """All values not ending with the given string."""
  references_not_ends_with: String
  shippedOn: DateTime

  """All values that are not equal to given value."""
  shippedOn_not: DateTime

  """All values that are contained in given list."""
  shippedOn_in: [DateTime!]

  """All values that are not contained in given list."""
  shippedOn_not_in: [DateTime!]

  """All values less than the given value."""
  shippedOn_lt: DateTime

  """All values less than or equal the given value."""
  shippedOn_lte: DateTime

  """All values greater than the given value."""
  shippedOn_gt: DateTime

  """All values greater than or equal the given value."""
  shippedOn_gte: DateTime
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  audits_every: AuditWhereInput
  audits_some: AuditWhereInput
  audits_none: AuditWhereInput
  cart: CartWhereInput
  customer: CustomerWhereInput
  shippingDetails: ShippingWhereInput
  tax: TaxWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product implements Node {
  id: ID!
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  cartsPresentIn(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  price: Float!
  attributes(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttributeValue!]
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  thumbnail: String!
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  price: Float!
  thumbnail: String!
  cartsPresentIn: CartItemCreateManyWithoutProductInput
  attributes: AttributeValueCreateManyWithoutProductsInput
  categories: CategoryCreateManyWithoutProductsInput
  reviews: ReviewCreateManyWithoutProductInput
}

input ProductCreateManyWithoutAttributesInput {
  create: [ProductCreateWithoutAttributesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutCartsPresentInInput {
  create: ProductCreateWithoutCartsPresentInInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutReviewsInput {
  create: ProductCreateWithoutReviewsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutAttributesInput {
  id: ID
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  price: Float!
  thumbnail: String!
  cartsPresentIn: CartItemCreateManyWithoutProductInput
  categories: CategoryCreateManyWithoutProductsInput
  reviews: ReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutCartsPresentInInput {
  id: ID
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  price: Float!
  thumbnail: String!
  attributes: AttributeValueCreateManyWithoutProductsInput
  categories: CategoryCreateManyWithoutProductsInput
  reviews: ReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutCategoriesInput {
  id: ID
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  price: Float!
  thumbnail: String!
  cartsPresentIn: CartItemCreateManyWithoutProductInput
  attributes: AttributeValueCreateManyWithoutProductsInput
  reviews: ReviewCreateManyWithoutProductInput
}

input ProductCreateWithoutReviewsInput {
  id: ID
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  price: Float!
  thumbnail: String!
  cartsPresentIn: CartItemCreateManyWithoutProductInput
  attributes: AttributeValueCreateManyWithoutProductsInput
  categories: CategoryCreateManyWithoutProductsInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  discountedPrice_ASC
  discountedPrice_DESC
  display_ASC
  display_DESC
  image_ASC
  image_DESC
  image2_ASC
  image2_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  thumbnail_ASC
  thumbnail_DESC
}

type ProductPreviousValues {
  id: ID!
  description: String!
  discountedPrice: Float
  display: Int
  image: String!
  image2: String
  name: String!
  price: Float!
  thumbnail: String!
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  discountedPrice: Float

  """All values that are not equal to given value."""
  discountedPrice_not: Float

  """All values that are contained in given list."""
  discountedPrice_in: [Float!]

  """All values that are not contained in given list."""
  discountedPrice_not_in: [Float!]

  """All values less than the given value."""
  discountedPrice_lt: Float

  """All values less than or equal the given value."""
  discountedPrice_lte: Float

  """All values greater than the given value."""
  discountedPrice_gt: Float

  """All values greater than or equal the given value."""
  discountedPrice_gte: Float
  display: Int

  """All values that are not equal to given value."""
  display_not: Int

  """All values that are contained in given list."""
  display_in: [Int!]

  """All values that are not contained in given list."""
  display_not_in: [Int!]

  """All values less than the given value."""
  display_lt: Int

  """All values less than or equal the given value."""
  display_lte: Int

  """All values greater than the given value."""
  display_gt: Int

  """All values greater than or equal the given value."""
  display_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  image2: String

  """All values that are not equal to given value."""
  image2_not: String

  """All values that are contained in given list."""
  image2_in: [String!]

  """All values that are not contained in given list."""
  image2_not_in: [String!]

  """All values less than the given value."""
  image2_lt: String

  """All values less than or equal the given value."""
  image2_lte: String

  """All values greater than the given value."""
  image2_gt: String

  """All values greater than or equal the given value."""
  image2_gte: String

  """All values containing the given string."""
  image2_contains: String

  """All values not containing the given string."""
  image2_not_contains: String

  """All values starting with the given string."""
  image2_starts_with: String

  """All values not starting with the given string."""
  image2_not_starts_with: String

  """All values ending with the given string."""
  image2_ends_with: String

  """All values not ending with the given string."""
  image2_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
  cartsPresentIn: CartItemUpdateManyWithoutProductInput
  attributes: AttributeValueUpdateManyWithoutProductsInput
  categories: CategoryUpdateManyWithoutProductsInput
  reviews: ReviewUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
}

input ProductUpdateManyMutationInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
}

input ProductUpdateManyWithoutAttributesInput {
  create: [ProductCreateWithoutAttributesInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutAttributesInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutAttributesInput!]
}

input ProductUpdateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutCartsPresentInInput {
  create: ProductCreateWithoutCartsPresentInInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutCartsPresentInDataInput
  upsert: ProductUpsertWithoutCartsPresentInInput
}

input ProductUpdateOneRequiredWithoutReviewsInput {
  create: ProductCreateWithoutReviewsInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutReviewsDataInput
  upsert: ProductUpsertWithoutReviewsInput
}

input ProductUpdateWithoutAttributesDataInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
  cartsPresentIn: CartItemUpdateManyWithoutProductInput
  categories: CategoryUpdateManyWithoutProductsInput
  reviews: ReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCartsPresentInDataInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
  attributes: AttributeValueUpdateManyWithoutProductsInput
  categories: CategoryUpdateManyWithoutProductsInput
  reviews: ReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCategoriesDataInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
  cartsPresentIn: CartItemUpdateManyWithoutProductInput
  attributes: AttributeValueUpdateManyWithoutProductsInput
  reviews: ReviewUpdateManyWithoutProductInput
}

input ProductUpdateWithoutReviewsDataInput {
  description: String
  discountedPrice: Float
  display: Int
  image: String
  image2: String
  name: String
  price: Float
  thumbnail: String
  cartsPresentIn: CartItemUpdateManyWithoutProductInput
  attributes: AttributeValueUpdateManyWithoutProductsInput
  categories: CategoryUpdateManyWithoutProductsInput
}

input ProductUpdateWithWhereUniqueWithoutAttributesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutAttributesDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoriesDataInput!
}

input ProductUpsertWithoutCartsPresentInInput {
  update: ProductUpdateWithoutCartsPresentInDataInput!
  create: ProductCreateWithoutCartsPresentInInput!
}

input ProductUpsertWithoutReviewsInput {
  update: ProductUpdateWithoutReviewsDataInput!
  create: ProductCreateWithoutReviewsInput!
}

input ProductUpsertWithWhereUniqueWithoutAttributesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutAttributesDataInput!
  create: ProductCreateWithoutAttributesInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  create: ProductCreateWithoutCategoriesInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  discountedPrice: Float

  """All values that are not equal to given value."""
  discountedPrice_not: Float

  """All values that are contained in given list."""
  discountedPrice_in: [Float!]

  """All values that are not contained in given list."""
  discountedPrice_not_in: [Float!]

  """All values less than the given value."""
  discountedPrice_lt: Float

  """All values less than or equal the given value."""
  discountedPrice_lte: Float

  """All values greater than the given value."""
  discountedPrice_gt: Float

  """All values greater than or equal the given value."""
  discountedPrice_gte: Float
  display: Int

  """All values that are not equal to given value."""
  display_not: Int

  """All values that are contained in given list."""
  display_in: [Int!]

  """All values that are not contained in given list."""
  display_not_in: [Int!]

  """All values less than the given value."""
  display_lt: Int

  """All values less than or equal the given value."""
  display_lte: Int

  """All values greater than the given value."""
  display_gt: Int

  """All values greater than or equal the given value."""
  display_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  image2: String

  """All values that are not equal to given value."""
  image2_not: String

  """All values that are contained in given list."""
  image2_in: [String!]

  """All values that are not contained in given list."""
  image2_not_in: [String!]

  """All values less than the given value."""
  image2_lt: String

  """All values less than or equal the given value."""
  image2_lte: String

  """All values greater than the given value."""
  image2_gt: String

  """All values greater than or equal the given value."""
  image2_gte: String

  """All values containing the given string."""
  image2_contains: String

  """All values not containing the given string."""
  image2_not_contains: String

  """All values starting with the given string."""
  image2_starts_with: String

  """All values not starting with the given string."""
  image2_not_starts_with: String

  """All values ending with the given string."""
  image2_ends_with: String

  """All values not ending with the given string."""
  image2_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  cartsPresentIn_every: CartItemWhereInput
  cartsPresentIn_some: CartItemWhereInput
  cartsPresentIn_none: CartItemWhereInput
  attributes_every: AttributeValueWhereInput
  attributes_some: AttributeValueWhereInput
  attributes_none: AttributeValueWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute]!
  attributeValues(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttributeValue]!
  audits(where: AuditWhereInput, orderBy: AuditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audit]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  shippings(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shipping]!
  shippingRegions(where: ShippingRegionWhereInput, orderBy: ShippingRegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShippingRegion]!
  carts(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cart]!
  taxes(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tax]!
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributeValue(where: AttributeValueWhereUniqueInput!): AttributeValue
  audit(where: AuditWhereUniqueInput!): Audit
  category(where: CategoryWhereUniqueInput!): Category
  customer(where: CustomerWhereUniqueInput!): Customer
  department(where: DepartmentWhereUniqueInput!): Department
  order(where: OrderWhereUniqueInput!): Order
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  product(where: ProductWhereUniqueInput!): Product
  review(where: ReviewWhereUniqueInput!): Review
  shipping(where: ShippingWhereUniqueInput!): Shipping
  shippingRegion(where: ShippingRegionWhereUniqueInput!): ShippingRegion
  cart(where: CartWhereUniqueInput!): Cart
  tax(where: TaxWhereUniqueInput!): Tax
  attributesConnection(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeConnection!
  attributeValuesConnection(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeValueConnection!
  auditsConnection(where: AuditWhereInput, orderBy: AuditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuditConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  shippingsConnection(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingConnection!
  shippingRegionsConnection(where: ShippingRegionWhereInput, orderBy: ShippingRegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingRegionConnection!
  cartsConnection(where: CartWhereInput, orderBy: CartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartConnection!
  taxesConnection(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaxConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Review implements Node {
  id: ID!
  createdAt: DateTime!
  customer: Customer!
  product: Product!
  rating: Int!
  review: String
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  rating: Int!
  review: String
  customer: CustomerCreateOneWithoutReviewsInput!
  product: ProductCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutCustomerInput {
  create: [ReviewCreateWithoutCustomerInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutProductInput {
  create: [ReviewCreateWithoutProductInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutCustomerInput {
  id: ID
  rating: Int!
  review: String
  product: ProductCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutProductInput {
  id: ID
  rating: Int!
  review: String
  customer: CustomerCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  rating_ASC
  rating_DESC
  review_ASC
  review_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  rating: Int!
  review: String
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  review: String

  """All values that are not equal to given value."""
  review_not: String

  """All values that are contained in given list."""
  review_in: [String!]

  """All values that are not contained in given list."""
  review_not_in: [String!]

  """All values less than the given value."""
  review_lt: String

  """All values less than or equal the given value."""
  review_lte: String

  """All values greater than the given value."""
  review_gt: String

  """All values greater than or equal the given value."""
  review_gte: String

  """All values containing the given string."""
  review_contains: String

  """All values not containing the given string."""
  review_not_contains: String

  """All values starting with the given string."""
  review_starts_with: String

  """All values not starting with the given string."""
  review_not_starts_with: String

  """All values ending with the given string."""
  review_ends_with: String

  """All values not ending with the given string."""
  review_not_ends_with: String
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  rating: Int
  review: String
  customer: CustomerUpdateOneRequiredWithoutReviewsInput
  product: ProductUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  rating: Int
  review: String
}

input ReviewUpdateManyMutationInput {
  rating: Int
  review: String
}

input ReviewUpdateManyWithoutCustomerInput {
  create: [ReviewCreateWithoutCustomerInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutCustomerInput!]
}

input ReviewUpdateManyWithoutProductInput {
  create: [ReviewCreateWithoutProductInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProductInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutCustomerDataInput {
  rating: Int
  review: String
  product: ProductUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutProductDataInput {
  rating: Int
  review: String
  customer: CustomerUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithWhereUniqueWithoutCustomerInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutCustomerDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutProductDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutCustomerInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutCustomerDataInput!
  create: ReviewCreateWithoutCustomerInput!
}

input ReviewUpsertWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutProductDataInput!
  create: ReviewCreateWithoutProductInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  review: String

  """All values that are not equal to given value."""
  review_not: String

  """All values that are contained in given list."""
  review_in: [String!]

  """All values that are not contained in given list."""
  review_not_in: [String!]

  """All values less than the given value."""
  review_lt: String

  """All values less than or equal the given value."""
  review_lte: String

  """All values greater than the given value."""
  review_gt: String

  """All values greater than or equal the given value."""
  review_gte: String

  """All values containing the given string."""
  review_contains: String

  """All values not containing the given string."""
  review_not_contains: String

  """All values starting with the given string."""
  review_starts_with: String

  """All values not starting with the given string."""
  review_not_starts_with: String

  """All values ending with the given string."""
  review_ends_with: String

  """All values not ending with the given string."""
  review_not_ends_with: String
  customer: CustomerWhereInput
  product: ProductWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Shipping implements Node {
  id: ID!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  cost: Float!
  region: ShippingRegion!
  type: String!
}

"""A connection to a list of items."""
type ShippingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShippingEdge]!
  aggregate: AggregateShipping!
}

input ShippingCreateInput {
  id: ID
  cost: Float!
  type: String!
  orders: OrderCreateManyWithoutShippingDetailsInput
  region: ShippingRegionCreateOneWithoutShippingInput!
}

input ShippingCreateManyWithoutRegionInput {
  create: [ShippingCreateWithoutRegionInput!]
  connect: [ShippingWhereUniqueInput!]
}

input ShippingCreateOneWithoutOrdersInput {
  create: ShippingCreateWithoutOrdersInput
  connect: ShippingWhereUniqueInput
}

input ShippingCreateWithoutOrdersInput {
  id: ID
  cost: Float!
  type: String!
  region: ShippingRegionCreateOneWithoutShippingInput!
}

input ShippingCreateWithoutRegionInput {
  id: ID
  cost: Float!
  type: String!
  orders: OrderCreateManyWithoutShippingDetailsInput
}

"""An edge in a connection."""
type ShippingEdge {
  """The item at the end of the edge."""
  node: Shipping!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShippingOrderByInput {
  id_ASC
  id_DESC
  cost_ASC
  cost_DESC
  type_ASC
  type_DESC
}

type ShippingPreviousValues {
  id: ID!
  cost: Float!
  type: String!
}

type ShippingRegion implements Node {
  id: ID!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer!]
  shipping(where: ShippingWhereInput, orderBy: ShippingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shipping!]
  name: String!
}

"""A connection to a list of items."""
type ShippingRegionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShippingRegionEdge]!
  aggregate: AggregateShippingRegion!
}

input ShippingRegionCreateInput {
  id: ID
  name: String!
  customers: CustomerCreateManyWithoutShippingRegionInput
  shipping: ShippingCreateManyWithoutRegionInput
}

input ShippingRegionCreateOneWithoutCustomersInput {
  create: ShippingRegionCreateWithoutCustomersInput
  connect: ShippingRegionWhereUniqueInput
}

input ShippingRegionCreateOneWithoutShippingInput {
  create: ShippingRegionCreateWithoutShippingInput
  connect: ShippingRegionWhereUniqueInput
}

input ShippingRegionCreateWithoutCustomersInput {
  id: ID
  name: String!
  shipping: ShippingCreateManyWithoutRegionInput
}

input ShippingRegionCreateWithoutShippingInput {
  id: ID
  name: String!
  customers: CustomerCreateManyWithoutShippingRegionInput
}

"""An edge in a connection."""
type ShippingRegionEdge {
  """The item at the end of the edge."""
  node: ShippingRegion!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShippingRegionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ShippingRegionPreviousValues {
  id: ID!
  name: String!
}

type ShippingRegionSubscriptionPayload {
  mutation: MutationType!
  node: ShippingRegion
  updatedFields: [String!]
  previousValues: ShippingRegionPreviousValues
}

input ShippingRegionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShippingRegionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShippingRegionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShippingRegionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShippingRegionWhereInput
}

input ShippingRegionUpdateInput {
  name: String
  customers: CustomerUpdateManyWithoutShippingRegionInput
  shipping: ShippingUpdateManyWithoutRegionInput
}

input ShippingRegionUpdateManyMutationInput {
  name: String
}

input ShippingRegionUpdateOneRequiredWithoutShippingInput {
  create: ShippingRegionCreateWithoutShippingInput
  connect: ShippingRegionWhereUniqueInput
  update: ShippingRegionUpdateWithoutShippingDataInput
  upsert: ShippingRegionUpsertWithoutShippingInput
}

input ShippingRegionUpdateOneWithoutCustomersInput {
  create: ShippingRegionCreateWithoutCustomersInput
  connect: ShippingRegionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ShippingRegionUpdateWithoutCustomersDataInput
  upsert: ShippingRegionUpsertWithoutCustomersInput
}

input ShippingRegionUpdateWithoutCustomersDataInput {
  name: String
  shipping: ShippingUpdateManyWithoutRegionInput
}

input ShippingRegionUpdateWithoutShippingDataInput {
  name: String
  customers: CustomerUpdateManyWithoutShippingRegionInput
}

input ShippingRegionUpsertWithoutCustomersInput {
  update: ShippingRegionUpdateWithoutCustomersDataInput!
  create: ShippingRegionCreateWithoutCustomersInput!
}

input ShippingRegionUpsertWithoutShippingInput {
  update: ShippingRegionUpdateWithoutShippingDataInput!
  create: ShippingRegionCreateWithoutShippingInput!
}

input ShippingRegionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShippingRegionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShippingRegionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShippingRegionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  customers_every: CustomerWhereInput
  customers_some: CustomerWhereInput
  customers_none: CustomerWhereInput
  shipping_every: ShippingWhereInput
  shipping_some: ShippingWhereInput
  shipping_none: ShippingWhereInput
}

input ShippingRegionWhereUniqueInput {
  id: ID
}

input ShippingScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ShippingScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShippingScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShippingScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cost: Float

  """All values that are not equal to given value."""
  cost_not: Float

  """All values that are contained in given list."""
  cost_in: [Float!]

  """All values that are not contained in given list."""
  cost_not_in: [Float!]

  """All values less than the given value."""
  cost_lt: Float

  """All values less than or equal the given value."""
  cost_lte: Float

  """All values greater than the given value."""
  cost_gt: Float

  """All values greater than or equal the given value."""
  cost_gte: Float
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
}

type ShippingSubscriptionPayload {
  mutation: MutationType!
  node: Shipping
  updatedFields: [String!]
  previousValues: ShippingPreviousValues
}

input ShippingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShippingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShippingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShippingSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShippingWhereInput
}

input ShippingUpdateInput {
  cost: Float
  type: String
  orders: OrderUpdateManyWithoutShippingDetailsInput
  region: ShippingRegionUpdateOneRequiredWithoutShippingInput
}

input ShippingUpdateManyDataInput {
  cost: Float
  type: String
}

input ShippingUpdateManyMutationInput {
  cost: Float
  type: String
}

input ShippingUpdateManyWithoutRegionInput {
  create: [ShippingCreateWithoutRegionInput!]
  connect: [ShippingWhereUniqueInput!]
  set: [ShippingWhereUniqueInput!]
  disconnect: [ShippingWhereUniqueInput!]
  delete: [ShippingWhereUniqueInput!]
  update: [ShippingUpdateWithWhereUniqueWithoutRegionInput!]
  updateMany: [ShippingUpdateManyWithWhereNestedInput!]
  deleteMany: [ShippingScalarWhereInput!]
  upsert: [ShippingUpsertWithWhereUniqueWithoutRegionInput!]
}

input ShippingUpdateManyWithWhereNestedInput {
  where: ShippingScalarWhereInput!
  data: ShippingUpdateManyDataInput!
}

input ShippingUpdateOneRequiredWithoutOrdersInput {
  create: ShippingCreateWithoutOrdersInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateWithoutOrdersDataInput
  upsert: ShippingUpsertWithoutOrdersInput
}

input ShippingUpdateWithoutOrdersDataInput {
  cost: Float
  type: String
  region: ShippingRegionUpdateOneRequiredWithoutShippingInput
}

input ShippingUpdateWithoutRegionDataInput {
  cost: Float
  type: String
  orders: OrderUpdateManyWithoutShippingDetailsInput
}

input ShippingUpdateWithWhereUniqueWithoutRegionInput {
  where: ShippingWhereUniqueInput!
  data: ShippingUpdateWithoutRegionDataInput!
}

input ShippingUpsertWithoutOrdersInput {
  update: ShippingUpdateWithoutOrdersDataInput!
  create: ShippingCreateWithoutOrdersInput!
}

input ShippingUpsertWithWhereUniqueWithoutRegionInput {
  where: ShippingWhereUniqueInput!
  update: ShippingUpdateWithoutRegionDataInput!
  create: ShippingCreateWithoutRegionInput!
}

input ShippingWhereInput {
  """Logical AND on all given filters."""
  AND: [ShippingWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShippingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShippingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  cost: Float

  """All values that are not equal to given value."""
  cost_not: Float

  """All values that are contained in given list."""
  cost_in: [Float!]

  """All values that are not contained in given list."""
  cost_not_in: [Float!]

  """All values less than the given value."""
  cost_lt: Float

  """All values less than or equal the given value."""
  cost_lte: Float

  """All values greater than the given value."""
  cost_gt: Float

  """All values greater than or equal the given value."""
  cost_gte: Float
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  region: ShippingRegionWhereInput
}

input ShippingWhereUniqueInput {
  id: ID
}

type Subscription {
  attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
  attributeValue(where: AttributeValueSubscriptionWhereInput): AttributeValueSubscriptionPayload
  audit(where: AuditSubscriptionWhereInput): AuditSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  shipping(where: ShippingSubscriptionWhereInput): ShippingSubscriptionPayload
  shippingRegion(where: ShippingRegionSubscriptionWhereInput): ShippingRegionSubscriptionPayload
  cart(where: CartSubscriptionWhereInput): CartSubscriptionPayload
  tax(where: TaxSubscriptionWhereInput): TaxSubscriptionPayload
}

type Tax implements Node {
  id: ID!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  percentage: Float!
  type: String!
}

"""A connection to a list of items."""
type TaxConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaxEdge]!
  aggregate: AggregateTax!
}

input TaxCreateInput {
  id: ID
  percentage: Float!
  type: String!
  orders: OrderCreateManyWithoutTaxInput
}

input TaxCreateOneWithoutOrdersInput {
  create: TaxCreateWithoutOrdersInput
  connect: TaxWhereUniqueInput
}

input TaxCreateWithoutOrdersInput {
  id: ID
  percentage: Float!
  type: String!
}

"""An edge in a connection."""
type TaxEdge {
  """The item at the end of the edge."""
  node: Tax!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaxOrderByInput {
  id_ASC
  id_DESC
  percentage_ASC
  percentage_DESC
  type_ASC
  type_DESC
}

type TaxPreviousValues {
  id: ID!
  percentage: Float!
  type: String!
}

type TaxSubscriptionPayload {
  mutation: MutationType!
  node: Tax
  updatedFields: [String!]
  previousValues: TaxPreviousValues
}

input TaxSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaxSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaxSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaxSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaxWhereInput
}

input TaxUpdateInput {
  percentage: Float
  type: String
  orders: OrderUpdateManyWithoutTaxInput
}

input TaxUpdateManyMutationInput {
  percentage: Float
  type: String
}

input TaxUpdateOneRequiredWithoutOrdersInput {
  create: TaxCreateWithoutOrdersInput
  connect: TaxWhereUniqueInput
  update: TaxUpdateWithoutOrdersDataInput
  upsert: TaxUpsertWithoutOrdersInput
}

input TaxUpdateWithoutOrdersDataInput {
  percentage: Float
  type: String
}

input TaxUpsertWithoutOrdersInput {
  update: TaxUpdateWithoutOrdersDataInput!
  create: TaxCreateWithoutOrdersInput!
}

input TaxWhereInput {
  """Logical AND on all given filters."""
  AND: [TaxWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaxWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaxWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  percentage: Float

  """All values that are not equal to given value."""
  percentage_not: Float

  """All values that are contained in given list."""
  percentage_in: [Float!]

  """All values that are not contained in given list."""
  percentage_not_in: [Float!]

  """All values less than the given value."""
  percentage_lt: Float

  """All values less than or equal the given value."""
  percentage_lte: Float

  """All values greater than the given value."""
  percentage_gt: Float

  """All values greater than or equal the given value."""
  percentage_gte: Float
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input TaxWhereUniqueInput {
  id: ID
}
